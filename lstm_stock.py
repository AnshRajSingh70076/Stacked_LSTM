# -*- coding: utf-8 -*-
"""LSTM_STOCK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ac1fOIee9Jsd3Rju08oGWzkM1nZDXvH_
"""

import requests
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

api_key = "1a9444f6065ad0fce6a13525442c3c8727c92868"
symbol = "AAPL"
end_date = datetime.now()
start_date = end_date - timedelta(days=365)

url = f"https://api.tiingo.com/tiingo/daily/{symbol}/prices"
params = {
    'startDate': start_date.strftime('%Y-%m-%d'),
    'endDate': end_date.strftime('%Y-%m-%d'),
    'token': api_key
}

response = requests.get(url, params=params)
data = response.json()
df = pd.DataFrame(data)

df['date'] = pd.to_datetime(df['date'])
df.set_index('date', inplace=True)
df['close'].plot(title='Apple Stock Prices Over the Last Year')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.grid()
plt.show()

df2 = df[['close']].reset_index()

df2.head()

df2.tail()

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df2[['close']] = scaler.fit_transform(df2[['close']])

train_size = int(len(df2) * 0.8)
train, test = df2[:train_size], df2[train_size:]

def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        a = data[i:(i + time_step), 0]
        X.append(a)
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

train_data = train[['close']].values
test_data = test[['close']].values

import numpy as np
time_step = 10

X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

print(f'Training Data Shape: {X_train.shape}, Labels Shape: {y_train.shape}')
print(f'Testing Data Shape: {X_test.shape}, Labels Shape: {y_test.shape}')

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=50, batch_size=32)

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

